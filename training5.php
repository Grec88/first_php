<?php
//1.В следующей программе содержится синтаксическая ошибка. Не выполняя программу в интерпретаторе РНР, выясните, о какой ошибке должен сообщить этот интерпретатор при попытке выполнить программу. В какой строке ошибка? Какие изменения следует внести в данную программу, чтобы она выполнялась правильно?*/
 function min_and_max_func($var_a, $var_b = 10, &$var_c = 0)
 {
     $var_c = min($var_a, $var_b);

     return max($var_a, $var_b);
 }

 $max_a_b = min_and_max_func(5, 8, $min_a_b);
 echo 'max ' . $max_a_b . PHP_EOL; // Ошибка в этой строке. Пропущена точка перед PHP_EOL(unxpected token 'PHP_EOL')
 echo 'min ' . $min_a_b . PHP_EOL;
/*2.Определите собственный обработчик ошибки для первого задания и выведите отформатированное сообщение об ошибке на экран, где должно содержаться: текст ошибки, имя файла, строка. */
// Определяем функцию для обработки ошибок
function custom_error_handler($errno, $errstr, $errfile, $errline) {
    // Выводим сообщение об ошибке на экран
    echo "Ошибка: $errstr в файле $errfile на строке $errline\n";
}

// Устанавливаем пользовательский обработчик ошибок
set_error_handler("custom_error_handler");

/*3.Напишите функцию, которая при определенном некорректном условии выбрасывает исключение. Затем перехватите и обработайте это исключение при помощи конструкции try catch. */
// Определяем функцию для деления
function divide($a, $b) {
    // Проверяем условие дел
        // Проверяем условие деления на ноль
        if ($b == 0) {
            // Выбрасываем исключение с сообщением
            throw new Exception("Деление на ноль запрещено");
        }
        // Возвращаем результат деления
        return $a / $b;
    }
    
    // Используем конструкцию try catch для перехвата и обработки исключения
    try {
        // Пытаемся вызвать функцию с некорректным аргументом
        echo divide(10, 0);
    } catch (Exception $e) {
        // Выводим сообщение об исключении
        echo "Исключение: " . $e->getMessage();
    }
/*4.Сделайте ассоциативный массив из пяти элементов. Используя одну из отладочных функций, выведите на экран ключи и значения  этого массива, а также типы значений. */
// Создаем ассоциативный массив с пятью элементами
$array = array(
    "name" => "Иван",
    "age" => 25,
    "gender" => "мужской",
    "city" => "Москва",
    "hobby" => "программирование"
);
// Выводим на экран ключи и значения массива, а также типы значений с помощью var_dump()
var_dump($array);

// Выводим на экран ключи и значения массива, а также типы значений с помощью print_r()
print_r($array);

?>